---
title: Social Hotspot Analysis and Visualization
subtitle: Patterns & Trends in Environmental Data / Computational Movement Analysis Geo 880 --- Semesterproject FS23
author: 
  - name: Aiyana Signer 
    affiliation:
      - name: University of Zurich
  - name: Diego Gomes
    affiliation:
      - name: University of Zurich
date: 07.02.2023
date-format: long
format: html
editor: visual
jupyter: python3
---

## Abstract

The aim of this project is to identify and characterize social hotspots, locations where people spend time in close proximity at the same time. As such, we investigate and operationalise the spatio-temporal clustering of individuals to uncover patterns of social interaction. A raster-based approach using a hexagonal grid and a point-based approach using a kernel density estimation (KDE) are compared. For the analysis, we use tracking data gathered with the posmo app from a group of students in the Computational Movement Analysis class.

## Introduction and Research Questions

In regards to terminology, a visit refers to a location where an individual spends a certain amount of time. A hotspot is a place with numerous visits, while a social hotspot also takes into account that the visits occur in the same time period.

Analysing social hotspots can provide valuable insights into how people gather, socialize, and engage with their surroundings. Attributes such as average duration, total time spent and the number of visits can be used to measure how popular a gathering spot is. In urban planning, this can be used to help set priorities for public investments in infrastructure (e.g., Kucukpehlivan et al., 2023). In the field of health sciences, hotspot analysis can be used to identify first outbreaks of diseases (Jones et al., 2008) to be used in emergency response planning.

In this project, we compare two different methods to identify hotspots, a raster-based and a point-based approach. Both methods implement an approach to first compute the visits and locations for an individual. This is then further generalized to compute the union and intersection of visits. As such, we try to answer the following research questions:

1.  How can individual hotspot detection from Posmo Tracking data be operationalized and applied to multiple individuals?

2.  How does a cell-based vs. point-based method impact the semantics and certainty of our analysis?

## Methods

<!-- Maybe we can also remove this, since it is partly already described in the introduction!-->

For both the raster-based and the point-based method, we first compute visits of an individual, i.e. locations that a person has spent a certain amount of time. Depending on the modeled environment, location is defined differently. For the raster-based approach, the environment is divided into individual cells, and a a visit is modeled as an individual spending a certain amount of time within a cell. On the other hand, the point-based approach uses a moving centroid to check whether a point is close enough to still be a part of that visit. In both cases, visits that fall below a given threshold time will be considered as a person being in transit, and hence not interpreted as a visit at that location.

The next step is to compute meeting points of multiple individuals, which we operationalised as the union or intersection of visits. For the raster-based approach, near each other means being in the same raster cell. For the point-based approach, a buffer with a certain distance threshold is created around each visit creating a polygon for each visit. The intersection then computes any intersection of the polygons.

## Results

```{python}
# import code from .py files
from raster_based_hotspots import RasterBasedPerson, RasterBasedUnionGroup, RasterBasedIntersectGroup
from point_based_hotspots import PointBasedPerson, PointBasedUnionGroup, PointBasedIntersectGroup
```

We will show an example visualizing the results with the data from one of the authors, which we will refer to as X.

```{python}
# create instance and read in data of an individual for raster-and point-based approach
raster_based_person = RasterBasedPerson.from_csv(f'data/posmo0.csv', 8)
point_based_person = PointBasedPerson.from_csv(f'data/posmo0.csv', 0.5314)
```

```{python}
# map raster locations based on how often a location was visited
raster_based_person.map_locations(column='num_visits')
```

We note that the hexagons with the highest number of visits are near Wil, SG and Zurich city, which is where X resides (home and WG). St. Gallen also has a higher number of visits which is X's workplace. The university campus Wädenswil and Irchel do not show a notably higher number of visits.

```{python}
# heatmap of locations based on how often a location was visited
point_based_person.map_locations(column='num_visits')
```

The heat map is highly influenced by the level of scale. The further zoomed out, the larger the areas of interest become, compared to the static cell size of raster-based approach. Also, some areas only show at certain scales, but it is not consistent. Romanshorn for example is shown at small scales, then is removed, and reappears once again zoomed out even more. 
At a scale of 1:10km, the areas NW of Weinfelden, NE of Wil and Romanshorn show a higher density, which was not the case in the raster-based method. Wil and Zurich have a higher density all scales, while St. Gallen is displayed at all scales, but is not distinguishable from other locations with few visits. 

```{python}
# instantiate the union class for the raster- and point-based approach
raster_based_union_group = RasterBasedUnionGroup()
point_based_union_group = PointBasedUnionGroup()

# instantiate the intersection class for the raster- and point-based approach
raster_based_intersection_group = RasterBasedIntersectGroup()
point_based_intersection_group = PointBasedIntersectGroup()
```

```{python}
# loop through all individuals 
for i in range(16):
    # instantiate raster- and point-based person
    raster_based_person = RasterBasedPerson.from_csv(f'data/posmo{i}.csv', 8)
    point_based_person = PointBasedPerson.from_csv(f'data/posmo{i}.csv', 0.5314)
    
    # add the person instance to the union group
    raster_based_union_group.add_person(raster_based_person)
    point_based_union_group.add_person(point_based_person)
    
    # add the person instance to the intersection group
    raster_based_intersection_group.add_person(raster_based_person)
    point_based_intersection_group.add_person(point_based_person)
    
    print(f'Finished loading Person {i}')
```

```{python}
# compute visits for union groups
raster_based_union_group.compute_visits()
point_based_union_group.compute_visits()

# compute visits where ate least 2 people are present for intersection groups
raster_based_intersection_group.compute_visits(n_min=2)
point_based_intersection_group.compute_visits(n_min=2)
```

```{python}
# map locations of union group from raster-based approached
raster_based_union_group.map_locations(column='num_visits')
```

The Wädenswil Campus has the highest number of visits (dark red), followed by Zurich city, Irchel Campus and Kilchberg, and Wiesendangen (red). The orange cells are individually spread all throughout, likely indicating places of residence for an individual.

```{python}
# heatmap of union group from point-based approached
point_based_union_group.map_locations(column='num_visits')
```

Zurich city and Wädenswil are the most visited locations in the union heatmap. There is also a rather high density north of the Zürichsee between Meilen, Rapperswil and Wetzikon.

The location of the visits matches between both methods except in Richterswil. While the raster-based method has cells between Wädenswil and Richterswil, only the Campus Wädenswil is depicted with a higher density in the union heatmap. 
```{python}
raster_based_intersection_group.map_locations(column='num_visits')
```

Wädenswil Campus has the most intersection, followed by Wollishofen, Kilchberg. The Irchel Campus has the second highest number of intersection, followed by Zurich Center.

```{python}
point_based_intersection_group.map_locations(column='num_visits')
```

Zurich city shows by far the highest density of visits. The area around Wollishofen and Wädenswil Campus also show a high number of intersection compared to the the remaining intersection areas. Compared to the raster-based method, the areas of intersection are smaller in the point-based method than the raster-based. For example, Zurich city only has 1 area of intersection the point-based method, but consists of 6 hexagons in the raster-based method.  

In general, both methods show the same intersection areas, except for Richterswil, which is not displayed in the point-based intersection.

```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Function to create histogram based on dataframe (visits or locations)
def create_histogram(df, column_name):
    df_copy = df.copy()
    plt.title(f'Histogram of {column_name.capitalize()}')
    
    # to plot how many points are in a visit for point-based method
    if column_name == 'points':
        df_copy['points_length'] = df_copy[column_name].apply(len)
        sns.histplot(data=df_copy, x='points_length')
        plt.title('Histogram of Points Length')
        plt.xlabel('Number of Points')
        
    # to plot time differences such as duration and average time 
    # converts ns to hours to facilitate interpretation
    elif df_copy[column_name].dtype == 'timedelta64[ns]':
        df_copy['duration_hours'] = df_copy[column_name] / pd.Timedelta(minutes=60)
        sns.histplot(data=df_copy, x='duration_hours')
        plt.xlabel(f'{column_name.capitalize()} in Hours')
    
    # to plot numerical columns such as number of visits    
    else:
        sns.histplot(data=df_copy, x=column_name)
        plt.xlabel(f'{column_name.capitalize()}')
```


## Discussion

In general, both methods capture similar main areas of interest. At an individual level, the residentia and work area can be identified, while the union and intersections clearly identify the location of the university campuses.

The raster-based method provides a straightforward and easily interpretable spatial representation of visits / meeting areas. Comparisons between raster maps is easier, as the constant cell size, regardless of zoom level, ensures consistent results. The cell-size does limit preciseness of visit locations, but it serves as an instrument for obfuscation, since exact location of the visit is not displayed.



## Literature

Jones, K., Patel, N., Levy, M. et al. (2008). Global trends in emerging infectious diseases. Nature 451, 990--993.

Kucukpehlivan, T., Cetin, M., Aksoy, T., Senyel Kurkcuoglu, M. A., Cabuk, S. N., Isik Pekkan, O., Dabanli, A., & Cabuk, A. (2023). Determination of the impacts of urban-planning of the urban land area using GIS hotspot analysis. Computers and Electronics in Agriculture, 210, 107935.

```{Python}
#devtools::install_github("benmarwick/wordcountaddin",  type = "source", dependencies = TRUE)
wordcountaddin:::text_stats()
```
